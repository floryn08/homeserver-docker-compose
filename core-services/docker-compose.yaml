version: "3.9"

networks:
  proxy-network:
    external: true
  cloudflare-network:
    external: true
  db-network:
    external: true
  mqtt-network:
    external: true

services:

  ofelia:
    container_name: ofelia
    image: mcuadros/ofelia:v3.0.8
    command: daemon --config=/config/config.ini
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${VOLUMES_PATH}/core-services/ofelia:/config
    restart: unless-stopped

  traefik:
    image: traefik:2.10.7
    container_name: traefik
    command:
      - --log.level=DEBUG
      - --ping=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=proxy-network
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.letsencrypt.acme.email=${ADMIN_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    ports:
      - 80:80
      - 443:443
      - 8082:8080
    volumes:
      - ${VOLUMES_PATH}/core-services/letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  redis:
    image: redis:7.2.4-alpine
    container_name: redis
    environment:
      POSTGRES_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - 6379:6379
    networks:
      - db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  postgres:
    image: postgres:15.5-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 5432:5432
    volumes:
      - ${VOLUMES_PATH}/core-services/postgres/data:/var/lib/postgresql/data
    networks:
      - db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:8.2
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - ${VOLUMES_PATH}/core-services/pgadmin/data:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - db-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mqtt:
    image: eclipse-mosquitto:2.0.18
    container_name: mqtt    
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ${VOLUMES_PATH}/core-services/mqtt/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ${VOLUMES_PATH}/core-services/mqtt/data:/mosquitto/data
      - ${VOLUMES_PATH}/core-services/mqtt/log:/mosquitto/log
    networks:
      - mqtt-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "timeout -t 5 mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
      
  filebrowser:
    image: filebrowser/filebrowser:v2.27.0
    container_name: filebrowser
    volumes:
      - ${VOLUMES_PATH}/core-services/filebrowser/database.db:/database.db
      - /mnt:/srv
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    ports:
      - 8888:80
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  ddclient:
    image: linuxserver/ddclient:3.11.2
    container_name: ddclient
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/core-services/ddclient:/config
    restart: unless-stopped

  duplicacy:
    container_name: duplicacy
    hostname: duplicacy
    image: hotio/duplicacy:release-1.7.2
    ports:
      - "3875:3875"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/core-services/duplicacy/config:/config
      - ${VOLUMES_PATH}/core-services/duplicacy/cache:/cache
      - ${VOLUMES_PATH}/core-services/duplicacy/logs:/logs
      - ${BACKUP_HDD_PATH}/backups:/backups
      - /home/pi:/source
      - ${STORAGE_HDD_PATH}:/storage
      - ${MEDIA_HDD_PATH}:/local-media
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3875" ]
      interval: 10s
      timeout: 5s
      retries: 5
    
  cloudflare:
    image: cloudflare/cloudflared:2024.1.4
    container_name: cloudflare
    environment:
      - PUID=1000
      - PGID=1000
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    restart: unless-stopped
    networks:
      - cloudflare-network
      
