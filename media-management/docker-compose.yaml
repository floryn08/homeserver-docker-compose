version: "3.9"

networks:
  cloudflare-network:
    external: true
  proxy-network:
    external: true
  media-management-network:
    external: true
  db-network:
    external: true

services:

  sonarr:
    image: linuxserver/sonarr:4.0.3
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/sonarr:/config
      - ${MEDIA_HDD_PATH}:/media
    ports:
      - 8989:8989
    restart: unless-stopped
    networks:
      - media-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8989/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  radarr:
    image: linuxserver/radarr:5.3.6
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/radarr:/config
      - ${MEDIA_HDD_PATH}:/media
    ports:
      - 7878:7878
    restart: unless-stopped
    networks:
      - media-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7878/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5    

  bazarr:
    image: linuxserver/bazarr:1.4.2
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/bazarr:/config
      - ${MEDIA_HDD_PATH}/movies:/movies
      - ${MEDIA_HDD_PATH}/tv:/tv
      - ${MEDIA_HDD_PATH}/anime:/anime
    ports:
      - 6767:6767
    restart: unless-stopped
    networks:
      - media-management-network
    depends_on:
      - sonarr
      - radarr
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6767/api/system/health", "--header", "X-API-KEY:${BAZARR_API_KEY}" ]
      interval: 10s
      timeout: 5s
      retries: 5     

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:4.6.4
    container_name: qbittorrent
    ports:
      - 8383:8383
      - 6881:6881
      - 6881:6881/udp
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8383
    volumes:
      - ${VOLUMES_PATH}/media-management/qbittorrent:/config
      - ${MEDIA_HDD_PATH}:/media
    restart: unless-stopped
    healthcheck:
      test: curl --connect-timeout 15 --silent --show-error --fail http://localhost:8383 || exit 1
      interval: 1m00s
      timeout: 15s
      retries: 3
      start_period: 1m00s

  jellyfin:
    image: linuxserver/jellyfin:10.8.13
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=${LOCAL_IP} #optional
    group_add: 
      - "44"
    volumes:
      - ${VOLUMES_PATH}/media-management/jellyfin:/config
      - ${MEDIA_HDD_PATH}/tv:/data/tvshows
      - ${MEDIA_HDD_PATH}/movies:/data/movies
      - ${MEDIA_HDD_PATH}/anime:/data/anime
      - ${MEDIA_HDD_PATH}/music:/data/music
    # - /opt/vc/lib:/opt/vc/lib #optional
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
    # - 1900:1900/udp #optional
    devices:
      - /dev/dri:/dev/dri #optional
      # - /dev/vcsm-cma:/dev/vcsm-cma #optional
      # - /dev/vchiq:/dev/vchiq #optional
      # - /dev/video10:/dev/video10 #optional
      # - /dev/video11:/dev/video11 #optional
      # - /dev/video12:/dev/video12 #optional
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=Host(`${DOMAIN}`) && PathPrefix(`/jellyfin`)
      - traefik.http.routers.jellyfin.entrypoints=websecure
      - traefik.http.routers.jellyfin.tls.certresolver=letsencrypt
      - traefik.http.routers.jellyfin-alt.rule=Host(`${DOMAIN2}`) && PathPrefix(`/jellyfin`)
      - traefik.http.routers.jellyfin-alt.entrypoints=web
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
    networks:
      - media-management-network
      - proxy-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8096/jellyfin/health" ]
      interval: 10s
      timeout: 5s
      retries: 5    

  jellystat:
    image: cyfershepard/jellystat:unstable
    container_name: jellystat
    user: "1000:1000"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${JELLYSTAT_DB}
      POSTGRES_IP: postgres
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JELLYSTAT_JWT}
      TZ: ${TIMEZONE}  
    restart: unless-stopped
    volumes:
      - ${VOLUMES_PATH}/media-management/jellystat/backup:/app/backend/backup-data # Mounting the volume
    ports:
      - "8087:3000"
    networks:
      - media-management-network
      - db-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 10s
      timeout: 5s
      retries: 5 

  nextcloud:
    image: linuxserver/nextcloud:28.0.4
    container_name: nextcloud
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${NEXTCLOUD_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_HOST_PASSWORD=${REDIS_PASSWORD}
    volumes:
      # - /home/pi/ssl:/config/keys
      - ${VOLUMES_PATH}/media-management/nextcloud:/config
      - ${BACKUP_HDD_PATH}/nextcloud:/data
    ports:
      - 1102:80
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.nextcloud.rule: Host(`nextcloud.${DOMAIN2}`)
      traefik.http.routers.nextcloud.entrypoints: web
      traefik.http.services.nextcloud.loadbalancer.server.port: 80
    networks:
      - media-management-network
      - proxy-network
      - db-network
    healthcheck:
      test: curl -sSf 'http://localhost/status.php' | grep '"installed":true' | grep '"maintenance":false' | grep '"needsDbUpgrade":false' || exit 1
      interval: 10s
      timeout: 5s
      retries: 10
     
  prowlarr:
    image: linuxserver/prowlarr:1.15.0
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/prowlarr:/config
    ports:
      - 9696:9696
    restart: unless-stopped
    networks:
      - media-management-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9696/ping" ]
      interval: 10s
      timeout: 5s
      retries: 5   
      
  tvheadend:
    image: linuxserver/tvheadend:7b762336-ls199
    container_name: tvheadend
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
      - RUN_OPTS= #optional
    volumes:
      - ${VOLUMES_PATH}/media-management/tvheadend/data:/config
      - ${VOLUMES_PATH}/media-management/tvheadend/recordings:/recordings
    ports:
      - 9981:9981
      - 9982:9982
    devices:
      - /dev/dri:/dev/dri #optional
      - /dev/dvb:/dev/dvb #optional
    restart: unless-stopped
    networks:
      - media-management-network
     
  jellyseerr:
    image: fallenbagel/jellyseerr:1.7.0
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    ports:
      - 5055:5055
    volumes:
      - ${VOLUMES_PATH}/media-management/jellyseerr/config:/app/config
    restart: unless-stopped
    networks:
      - media-management-network
      - cloudflare-network
    healthcheck:
      test: wget --output-document - --quiet http://localhost:5055/api/v1/status | grep -q '"restartRequired":false' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5   
     
  wizarr:
    container_name: wizarr
    image: ghcr.io/wizarrrr/wizarr:3.5.1
    ports:
      - 5690:5690
    environment:
      PUID: 1000
      PGID: 1000
      TZ: ${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/wizarr/database:/data/database
    restart: unless-stopped
    networks:
      - media-management-network
      - cloudflare-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5690" ]
      interval: 10s
      timeout: 5s
      retries: 5   

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:4.2.3
    container_name: sabnzbd
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TIMEZONE}
    volumes:
      - ${VOLUMES_PATH}/media-management/sabnzbd/config:/config
      - ${MEDIA_HDD_PATH}:/media
    ports:
      - 8084:8080
    restart: unless-stopped
